# https://raw.githubusercontent.com/haproxytech/kubernetes-ingress/v1.11.5/deploy/haproxy-ingress.yaml
---
# Fixme use namespace haproxy-controller, currently default
# kubectl get namespace haproxy-controller -o json | grep -v '"kubernetes"' | kubectl replace --raw "/api/v1/namespaces/haproxy-controller/finalize" -f -
#apiVersion: v1
#kind: Namespace
#metadata:
#  name: default

---
apiVersion: v1
kind: Namespace
metadata:
  name: haproxy-controller

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy-kubernetes-ingress
  namespace: default

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy-kubernetes-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - services
      - namespaces
      - events
      - serviceaccounts
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
      - ingresses/status
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
      - create
      - patch
      - update
  - apiGroups:
      - core.haproxy.org
    resources:
      - '*'
    verbs:
      - get
      - list
      - watch
      - update
  - apiGroups:
      - ingress.v1.haproxy.org
    resources:
      - '*'
    verbs:
      - get
      - list
      - watch
      - update
  - apiGroups:
      - "discovery.k8s.io"
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "apiextensions.k8s.io"
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - watch
      - update
  - apiGroups:
      - "apps"
    resources:
      - replicasets
      - deployments
      - daemonsets
    verbs:
      - get
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy-kubernetes-ingress
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: haproxy-kubernetes-ingress
subjects:
  - kind: ServiceAccount
    name: haproxy-kubernetes-ingress
    namespace: default

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-kubernetes-ingress
  namespace: default
data:
  forwarded-for: "true"
  ssl-certificate: "default/${ssl_certificate}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: haproxy-ingress
  name: haproxy-kubernetes-ingress
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      run: haproxy-ingress
  template:
    metadata:
      labels:
        run: haproxy-ingress
    spec:
      serviceAccountName: haproxy-kubernetes-ingress
      containers:
        - name: haproxy-ingress
          image: haproxytech/kubernetes-ingress
          args:
            - --configmap=default/haproxy-kubernetes-ingress
            - --default-backend-service=default/haproxy-kubernetes-ingress-default-backend
            - --ingress.class=default
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            runAsUser:  1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              memory: 2560Mi
            requests:
              memory: 2048Mi
          livenessProbe:
            httpGet:
              path: /healthz
              port: 1042
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
            - name: stat
              containerPort: 1024
          env:
            - name: TZ
              value: "Etc/UTC"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/exoscale-loadbalancer-service-healthcheck-mode: "https"
    service.beta.kubernetes.io/exoscale-loadbalancer-service-healthcheck-uri: "/healthz"
    service.beta.kubernetes.io/exoscale-loadbalancer-service-strategy: round-robin
    service.beta.kubernetes.io/exoscale-loadbalancer-id: "${exoscale_loadbalancer_id}"
    service.beta.kubernetes.io/exoscale-loadbalancer-external: "true"
    service.beta.kubernetes.io/exoscale-loadbalancer-service-instancepool-id: "${exoscale_loadbalancer_service_instancepool_id}"
  labels:
    run: haproxy-ingress-https
  name: haproxy-kubernetes-ingress-https
  namespace: default
spec:
  selector:
    run: haproxy-ingress
  type: LoadBalancer
  ports:
      - name: https
        port: 443
        protocol: TCP
        targetPort: 443
#---
#apiVersion: v1
#kind: Service
#metadata:
#  annotations:
#    service.beta.kubernetes.io/exoscale-loadbalancer-service-healthcheck-mode: "http"
#    service.beta.kubernetes.io/exoscale-loadbalancer-service-healthcheck-uri: "/healthz"
#    service.beta.kubernetes.io/exoscale-loadbalancer-service-strategy: round-robin
#    service.beta.kubernetes.io/exoscale-loadbalancer-id: "${exoscale_loadbalancer_id}"
#    service.beta.kubernetes.io/exoscale-loadbalancer-external: "true"
#    service.beta.kubernetes.io/exoscale-loadbalancer-service-instancepool-id: "${exoscale_loadbalancer_service_instancepool_id}"
#  labels:
#    run: haproxy-ingress-http
#  name: haproxy-kubernetes-ingress-http
#  namespace: default
#spec:
#  selector:
#    run: haproxy-ingress
#  type: LoadBalancer
#  ports:
#    - name: http
#      port: 80
#      protocol: TCP
#      targetPort: 80
#---
#apiVersion: v1
#kind: Service
#metadata:
#  annotations:
#    service.beta.kubernetes.io/exoscale-loadbalancer-service-healthcheck-mode: "http"
#    service.beta.kubernetes.io/exoscale-loadbalancer-service-healthcheck-uri: "/healthz"
#    service.beta.kubernetes.io/exoscale-loadbalancer-service-strategy: round-robin
#    service.beta.kubernetes.io/exoscale-loadbalancer-id: "${exoscale_loadbalancer_id}"
#    service.beta.kubernetes.io/exoscale-loadbalancer-external: "true"
#    service.beta.kubernetes.io/exoscale-loadbalancer-service-instancepool-id: "${exoscale_loadbalancer_service_instancepool_id}"
#  labels:
#    run: haproxy-ingress-stat
#  name: haproxy-kubernetes-ingress-stat
#  namespace: default
#spec:
#  selector:
#    run: haproxy-ingress
#  type: LoadBalancer
#  ports:
#    - name: stat
#      port: 1024
#      protocol: TCP
#      targetPort: 1024